#pragma once
class AstarNode
{
public:
	int calFcost() const;
	int calHcost(short fromx, short fromy, short tox, short toy); // 목적지까지의 예상거리 

	AstarNode(short x, short y, int g, int h, AstarNode* parent = nullptr)
		: _x(x), _y(y), _gcost(g), _hcost(h), parent(parent) {}

	bool operator<(const AstarNode& other) const {
		return calFcost() > other.calFcost(); // fCost가 낮은 순서로 정렬
	}
public:
	int _gcost;
	int _hcost;
	short _x;
	short _y;

	AstarNode* parent;
};

class Astar
{
private:
	Astar() {
		for (const auto& pos : puddle_pos) {
			_map[pos.first][pos.second] = 1;
		}
		for (const auto& pos : tree_pos) {
			_map[pos.first][pos.second] = 1;
		}
		for (const auto& pos : castle_pos) {
			_map[pos.first][pos.second] = 1;
		}
	}
	Astar(const Astar&) = delete;
	Astar& operator=(const Astar&) = delete;

public:
	static Astar& getInstance() {
		static Astar instance;
		return instance;
	}

private:
	inline int calculateH(short fromX, short fromY, short toX, short toY);
	inline bool isValid(int x, int y, bool closedList[1000][1000]); // 유효성 검사 함수 추가

public:
	vector<AstarNode>findpath(short startx, short starty, short goalx, short goaly);
	mutex closedListMutex;
	std::array<std::array<int, 1000>, 1000> _map = { 0 };
	array<pair<short, short>, 129> puddle_pos{
		{
		{10, 15}, {50, 100}, {90, 120}, {150, 200}, {200, 250},
	{30, 40}, {80, 90}, {130, 140}, {180, 190}, {240, 250},
	{70, 20}, {120, 30}, {170, 40}, {220, 50}, {270, 60},
	{300, 300}, {320, 350}, {400, 400}, {450, 450}, {480, 490},
	{20, 300}, {60, 320}, {100, 350}, {200, 400}, {300, 450},
	{50, 250}, {100, 260}, {150, 270}, {200, 280}, {250, 290},
	{400, 10}, {420, 60}, {440, 120}, {460, 180}, {480, 250},
	{50, 30}, {100, 70}, {150, 110}, {200, 150}, {250, 190},
	{300, 20}, {320, 70}, {340, 120}, {360, 170}, {380, 220},
	{400, 300}, {420, 350}, {440, 400}, {460, 450}, {490, 480},
	{30, 480}, {70, 440}, {110, 400}, {150, 360}, {190, 320},
	{210, 210}, {250, 250}, {290, 290}, {330, 330}, {370, 370},
	{15, 15}, {60, 60}, {105, 105}, {150, 150}, {195, 195},
	{240, 240}, {285, 285}, {330, 330}, {375, 375}, {420, 420},
	{460, 460}, {20, 450}, {40, 430}, {60, 410}, {80, 390},
	{250, 50}, {260, 100}, {270, 150}, {280, 200}, {290, 250},
	{300, 300}, {310, 350}, {320, 400}, {330, 450}, {340, 490},
	{400, 30}, {450, 50}, {480, 70}, {490, 90}, {490, 130},
	{50, 20}, {100, 50}, {150, 100}, {200, 150}, {250, 200},
	{300, 250}, {350, 300}, {400, 350}, {450, 400}, {490, 450},
	{20, 100}, {50, 150}, {80, 200}, {110, 250}, {140, 300},
	{300, 20}, {350, 60}, {400, 110}, {450, 160}, {490, 210},
	{100, 490}, {150, 470}, {200, 450}, {250, 430}, {300, 410},
	{350, 390}, {400, 370}, {450, 350}, {490, 330}, {40, 470},
	}
	};
	array<pair<short, short>, 95> castle_pos{ {
		{5, 25}, {15, 35}, {25, 45}, {35, 55}, {45, 65},
	{55, 75}, {65, 85}, {75, 95}, {85, 105}, {95, 115},
	{105, 125}, {115, 135}, {125, 145}, {135, 155}, {145, 165},
	{155, 175}, {165, 185}, {175, 195}, {185, 205}, {195, 215},
	{205, 225}, {215, 235}, {225, 245}, {235, 255}, {245, 265},
	{255, 275}, {265, 285}, {275, 295}, {285, 305}, {295, 315},
	{305, 325}, {315, 335}, {325, 345}, {335, 355}, {345, 365},
	{355, 375}, {365, 385}, {375, 395}, {385, 405}, {395, 415},
	{405, 425}, {415, 435}, {425, 445}, {435, 455}, {445, 465},
	{455, 475}, {465, 485}, {475, 495}, {485, 5}, {495, 15},
	{5, 495}, {15, 485}, {25, 475}, {35, 465}, {45, 455},
	{55, 445}, {65, 435}, {75, 425}, {85, 415}, {95, 405},
	{105, 395}, {115, 385}, {125, 375}, {135, 365}, {145, 355},
	{155, 345}, {165, 335}, {175, 325}, {185, 315}, {195, 305},
	{205, 295}, {215, 285}, {225, 275}, {235, 265}, {245, 255},
	{255, 245}, {265, 235}, {275, 225}, {285, 215}, {295, 205},
	{305, 195}, {315, 185}, {325, 175}, {335, 165}, {345, 155},
	{355, 145}, {365, 135}, {375, 125}, {385, 115}, {395, 105},
	{405, 95}, {415, 85}, {425, 75}, {435, 65}, {445, 55},
		} };
	array<pair<short, short>, 150>tree_pos{ {
			{3, 7}, {12, 18}, {21, 30}, {33, 45}, {44, 55},
	{66, 12}, {75, 24}, {85, 35}, {95, 46}, {100, 58},
	{110, 23}, {120, 37}, {130, 49}, {140, 61}, {150, 72},
	{160, 83}, {170, 94}, {180, 105}, {190, 116}, {200, 127},
	{210, 138}, {220, 149}, {230, 160}, {240, 171}, {250, 182},
	{260, 193}, {270, 204}, {280, 215}, {290, 226}, {300, 237},
	{310, 248}, {320, 259}, {330, 270}, {340, 281}, {350, 292},
	{360, 303}, {370, 314}, {380, 325}, {390, 336}, {400, 347},
	{410, 358}, {420, 369}, {430, 380}, {440, 391}, {450, 402},
	{460, 413}, {470, 424}, {480, 435}, {490, 446}, {500, 457},
	{5, 10}, {15, 20}, {25, 30}, {35, 40}, {45, 50},
	{55, 60}, {65, 70}, {75, 80}, {85, 90}, {95, 100},
	{105, 110}, {115, 120}, {125, 130}, {135, 140}, {145, 150},
	{155, 160}, {165, 170}, {175, 180}, {185, 190}, {195, 200},
	{205, 210}, {215, 220}, {225, 230}, {235, 240}, {245, 250},
	{255, 260}, {265, 270}, {275, 280}, {285, 290}, {295, 300},
	{305, 310}, {315, 320}, {325, 330}, {335, 340}, {345, 350},
	{355, 360}, {365, 370}, {375, 380}, {385, 390}, {395, 400},
	{405, 410}, {415, 420}, {425, 430}, {435, 440}, {445, 450},
	{455, 460}, {465, 470}, {475, 480}, {485, 490}, {495, 500},
	{13, 17}, {23, 27}, {33, 37}, {43, 47}, {53, 57},
	{63, 67}, {73, 77}, {83, 87}, {93, 97}, {103, 107},
	{113, 117}, {123, 127}, {133, 137}, {143, 147}, {153, 157},
	{163, 167}, {173, 177}, {183, 187}, {193, 197}, {203, 207},
	{213, 217}, {223, 227}, {233, 237}, {243, 247}, {253, 257},
	{263, 267}, {273, 277}, {283, 287}, {293, 297}, {303, 307},
	{313, 317}, {323, 327}, {333, 337}, {343, 347}, {353, 357},
	{363, 367}, {373, 377}, {383, 387}, {393, 397}, {403, 407},
	{413, 417}, {423, 427}, {433, 437}, {443, 447}, {453, 457},
	{463, 467}, {473, 477}, {483, 487}, {493, 497}, {5, 487},
}
	};

};
